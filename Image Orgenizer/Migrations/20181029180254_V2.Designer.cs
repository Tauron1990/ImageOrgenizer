// <auto-generated />
using System;
using ImageOrganizer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ImageOrganizer.Migrations
{
    [DbContext(typeof(DatabaseImpl))]
    [Migration("20181029180254_V2")]
    partial class V2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview3-35497");

            modelBuilder.Entity("ImageOrganizer.Data.Entities.DownloadEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DownloadStade");

                    b.Property<int>("DownloadType");

                    b.Property<int>("FailedCount");

                    b.Property<string>("Image");

                    b.Property<string>("Provider");

                    b.Property<bool>("RemoveImageOnFail");

                    b.Property<DateTime>("Schedule");

                    b.HasKey("Id");

                    b.ToTable("Downloads");
                });

            modelBuilder.Entity("ImageOrganizer.Data.Entities.ImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Added");

                    b.Property<string>("Author");

                    b.Property<bool>("Favorite");

                    b.Property<string>("Name");

                    b.Property<string>("ProviderName");

                    b.Property<int>("RandomCount");

                    b.Property<int>("SortOrder");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ImageOrganizer.Data.Entities.ImageTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ImageEntityId");

                    b.Property<string>("TagEntityId");

                    b.HasKey("Id");

                    b.HasIndex("ImageEntityId");

                    b.HasIndex("TagEntityId");

                    b.ToTable("ImageTag");
                });

            modelBuilder.Entity("ImageOrganizer.Data.Entities.OptionEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("ImageOrganizer.Data.Entities.ProfileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrentImages");

                    b.Property<int>("CurrentPosition");

                    b.Property<bool>("Favorite");

                    b.Property<string>("FilterString");

                    b.Property<string>("Name");

                    b.Property<int>("NextImage");

                    b.Property<string>("PageType");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("ImageOrganizer.Data.Entities.TagEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ImageOrganizer.Data.Entities.TagTypeEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.HasKey("Id");

                    b.ToTable("TagTypes");
                });

            modelBuilder.Entity("ImageOrganizer.Data.Entities.ImageTag", b =>
                {
                    b.HasOne("ImageOrganizer.Data.Entities.ImageEntity", "ImageEntity")
                        .WithMany("ImageTags")
                        .HasForeignKey("ImageEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ImageOrganizer.Data.Entities.TagEntity", "TagEntity")
                        .WithMany("ImageTags")
                        .HasForeignKey("TagEntityId");
                });

            modelBuilder.Entity("ImageOrganizer.Data.Entities.TagEntity", b =>
                {
                    b.HasOne("ImageOrganizer.Data.Entities.TagTypeEntity", "Type")
                        .WithMany("Tags")
                        .HasForeignKey("TypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
